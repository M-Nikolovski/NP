import javax.xml.crypto.dom.DOMCryptoContext;
import java.util.Scanner;

public class GenericFractionTest {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        double n1 = scanner.nextDouble();
        double d1 = scanner.nextDouble();
        float n2 = scanner.nextFloat();
        float d2 = scanner.nextFloat();
        int n3 = scanner.nextInt();
        int d3 = scanner.nextInt();
        try {
            GenericFraction<Double, Double> gfDouble = new GenericFraction<Double, Double>(n1, d1);
            GenericFraction<Float, Float> gfFloat = new GenericFraction<Float, Float>(n2, d2);
            GenericFraction<Integer, Integer> gfInt = new GenericFraction<Integer, Integer>(n3, d3);
            System.out.printf("%.2f\n", gfDouble.toDouble());
            System.out.println(gfDouble.add(gfFloat));
            System.out.println(gfInt.add(gfFloat));
            System.out.println(gfDouble.add(gfInt));
            gfInt = new GenericFraction<Integer, Integer>(n3, 0);
        } catch(ZeroDenominatorException e) {
            System.out.println(e.getMessage());
        }

        scanner.close();
    }

}


class ZeroDenominatorException extends Exception {

    public ZeroDenominatorException(String message) {
        super(message);
    }

}


class GenericFraction<T extends Number, U extends Number> {

    private T numerator;
    private U denominator;

    public GenericFraction(T numerator, U denominator) throws ZeroDenominatorException {
        this.numerator = numerator;
        if (denominator.doubleValue() == 0)
            throw new ZeroDenominatorException("Denominator cannot be zero");
        else
            this.denominator = denominator;
    }

    public GenericFraction<Double, Double> add(GenericFraction<? extends Number, ? extends Number> gf)
            throws ZeroDenominatorException {

        Double _numerator = numerator.doubleValue();
        Double _denominator = denominator.doubleValue();
        Double _gf_numerator = gf.numerator.doubleValue();
        Double _gf_denominator = gf.denominator.doubleValue();

        if (_denominator == _gf_denominator)
            return new GenericFraction<>(_numerator + _gf_numerator, _denominator);
        else {
            double lcm = (_denominator > _gf_denominator)? _denominator : _gf_denominator;
            while (true) {
                if (lcm % _denominator == 0  &&  lcm % _gf_denominator == 0)
                    break;
                lcm++;
            }
            return new GenericFraction<>(
                    (_numerator * lcm / _denominator) + (_gf_numerator * lcm / _gf_denominator), lcm);
        }
    }

    public double toDouble() {
        return numerator.doubleValue() / denominator.doubleValue();
    }

    @Override
    public String toString() {
        
        Double a = numerator.doubleValue();
        Double b = denominator.doubleValue();
        Double t;
        
        while (b != 0) {
            t = b;
            b = a % b;
            a = t;
        }
        
        return String.format("%.2f / %.2f", 
                numerator.doubleValue() / a, 
                denominator.doubleValue() / a);
    }
}
