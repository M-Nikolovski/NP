import java.util.ArrayList;
import java.util.Scanner;

public class PizzaOrderTest {

    public static void main(String[] args) {
        Scanner jin = new Scanner(System.in);
        int k = jin.nextInt();
        if (k == 0) { //test Item
            try {
                String type = jin.next();
                String name = jin.next();
                Item item = null;
                if (type.equals("Pizza")) item = new PizzaItem(name);
                else item = new ExtraItem(name);
                System.out.println(item.getPrice());
            } catch (Exception e) {
                System.out.println(e.getClass().getSimpleName());
            }
        }
        if (k == 1) { // test simple order
            Order order = new Order();
            while (true) {
                try {
                    String type = jin.next();
                    String name = jin.next();
                    Item item = null;
                    if (type.equals("Pizza")) item = new PizzaItem(name);
                    else item = new ExtraItem(name);
                    if (!jin.hasNextInt()) break;
                    order.addItem(item, jin.nextInt());
                } catch (Exception e) {
                    System.out.println(e.getClass().getSimpleName());
                }
            }
            jin.next();
            System.out.println(order.getPrice());
            order.displayOrder();
            while (true) {
                try {
                    String type = jin.next();
                    String name = jin.next();
                    Item item = null;
                    if (type.equals("Pizza")) item = new PizzaItem(name);
                    else item = new ExtraItem(name);
                    if (!jin.hasNextInt()) break;
                    order.addItem(item, jin.nextInt());
                } catch (Exception e) {
                    System.out.println(e.getClass().getSimpleName());
                }
            }
            System.out.println(order.getPrice());
            order.displayOrder();
        }
        if (k == 2) { // test order with removing
            Order order = new Order();
            while (true) {
                try {
                    String type = jin.next();
                    String name = jin.next();
                    Item item = null;
                    if (type.equals("Pizza")) item = new PizzaItem(name);
                    else item = new ExtraItem(name);
                    if (!jin.hasNextInt()) break;
                    order.addItem(item, jin.nextInt());
                } catch (Exception e) {
                    System.out.println(e.getClass().getSimpleName());
                }
            }
            jin.next();
            System.out.println(order.getPrice());
            order.displayOrder();
            while (jin.hasNextInt()) {
                try {
                    int idx = jin.nextInt();
                    order.removeItem(idx);
                } catch (Exception e) {
                    System.out.println(e.getClass().getSimpleName());
                }
            }
            System.out.println(order.getPrice());
            order.displayOrder();
        }
        if (k == 3) { //test locking & exceptions
            Order order = new Order();
            try {
                order.lock();
            } catch (Exception e) {
                System.out.println(e.getClass().getSimpleName());
            }
            try {
                order.addItem(new ExtraItem("Coke"), 1);
            } catch (Exception e) {
                System.out.println(e.getClass().getSimpleName());
            }
            try {
                order.lock();
            } catch (Exception e) {
                System.out.println(e.getClass().getSimpleName());
            }
            try {
                order.removeItem(0);
            } catch (Exception e) {
                System.out.println(e.getClass().getSimpleName());
            }
        }
    }

}



class InvalidExtraTypeException extends Exception {}

class InvalidPizzaTypeException extends Exception {}

class ItemOutOfStockException extends Exception {

    private Item cause;

    public ItemOutOfStockException(Item cause) {
        this.cause = cause;
    }
}

class EmptyOrder extends Exception { }

class OrderLockedException extends Exception { }


interface Item {
    public int getPrice();
    public String getType();
}


class ExtraItem implements Item {

    private String type;
    private int price;

    public ExtraItem(String type) throws InvalidExtraTypeException {
        if (type.equals("Coke")) {
            this.type = type;
            this.price = 5;
        } else if (type.equals("Ketchup")) {
            this.type = type;
            this.price = 3;
        } else {
            throw new InvalidExtraTypeException();
        }
    }

    @Override
    public int getPrice() { return price; }

    @Override
    public String getType() { return type; }
}


class PizzaItem implements Item {

    private String type;
    private int price;

    public PizzaItem(String type) throws InvalidPizzaTypeException {
        if (type.equals("Standard")) {
            this.type = type;
            this.price = 10;
        } else if (type.equals("Pepperoni")) {
            this.type = type;
            this.price = 12;
        } else if (type.equals("Vegetarian")) {
            this.type = type;
            this.price = 8;
        } else {
            throw new InvalidPizzaTypeException();
        }
    }

    @Override
    public int getPrice() { return price; }

    public String getType() { return type; }
}


class Order {

    private ArrayList<Item> items;
    private int itemsCount[];
    private boolean isLocked;

    public Order() {
        items = new ArrayList<>();
        itemsCount = new int[100];
    }

    public void addItem(Item item, int count) throws OrderLockedException, ItemOutOfStockException {
        
        if (isLocked)
            throw new OrderLockedException();
        if (count > 10)
            throw new ItemOutOfStockException(item);
        
        for (Item _item : items) {
            if (_item.getType().equals(item.getType())) {
                itemsCount[items.indexOf(_item)] = count;
                return;
            }
        }
        
        items.add(item);
        itemsCount[items.indexOf(item)] = count;
        isLocked = false;
    }

    public void removeItem(int idx) throws OrderLockedException, ArrayIndexOutOfBoundsException {
        if (isLocked)
            throw new OrderLockedException();
        if (idx > items.size() || !(idx >= 0))
            throw new ArrayIndexOutOfBoundsException(idx);
        items.remove(idx);
    }

    public int getPrice() {
        int sum = 0;
        for (Item item : items) {
            sum += item.getPrice() * itemsCount[items.indexOf(item)];
        }
        return sum;
    }

    public void lock() throws EmptyOrder {
        if (items.size() > 0)
            isLocked = true;
        else
            throw new EmptyOrder();
    }

    public void displayOrder() {

        String orderString = "";

        for (int i = 0; i < items.size(); i++) {
            orderString += String.format("%3d.%-15sx%2d%5d$\n",
                    i+1, items.get(i).getType(), itemsCount[i], items.get(i).getPrice() * itemsCount[i]);
        }
        orderString += String.format("%-22s%5d$", "Total:", getPrice());
        System.out.println(orderString);

    }

}
