import java.util.ArrayList;
import java.util.Scanner;
import java.util.Stack;


public class ShapesTest {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Canvas canvas = new Canvas();
        while (scanner.hasNextLine()) {
            String line = scanner.nextLine();
            String[] parts = line.split(" ");
            int type = Integer.parseInt(parts[0]);
            String id = parts[1];
            if (type == 1) {
                Color color = Color.valueOf(parts[2]);
                float radius = Float.parseFloat(parts[3]);
                canvas.add(id, color, radius);
            } else if (type == 2) {
                Color color = Color.valueOf(parts[2]);
                float width = Float.parseFloat(parts[3]);
                float height = Float.parseFloat(parts[4]);
                canvas.add(id, color, width, height);
            } else if (type == 3) {
                float scaleFactor = Float.parseFloat(parts[2]);
                System.out.println("ORIGNAL:");
                System.out.print(canvas);
                canvas.scale(id, scaleFactor);
                System.out.printf("AFTER SCALING: %s %.2f\n", id, scaleFactor);
                System.out.print(canvas);
            }

        }
    }
}


enum Color {

    RED, GREEN, BLUE

}


interface Scalable {

    void scale(float scaleFactor);

}


interface Stackable {

    float weight();

}


abstract class Shape implements Scalable, Stackable {

    protected String id;
    protected Color color;

}


class Circle extends Shape {

    private float radius;

    public Circle(String id, Color color, float radius) {
        this.id = id;
        this.color = color;
        this.radius = radius;
    }

    @Override
    public void scale(float scaleFactor) {
        radius *= scaleFactor;
    }

    @Override
    public float weight() {
        return (float)Math.PI * radius * radius;
    }

}


class Rectangle extends Shape {

    private float width;
    private float height;

    public Rectangle(String id, Color color, float width, float height) {
        this.id = id;
        this.color = color;
        this.width = width;
        this.height = height;
    }

    @Override
    public void scale(float scaleFactor) {
        width *= scaleFactor;
        height *= scaleFactor;
    }

    @Override
    public float weight() {
        return width * height;
    }

}


class Canvas {

    private ArrayList<Shape> shapes;

    public Canvas() {
        shapes = new ArrayList<>();
    }

    void add(String id, Color color, float radius) {
        if (shapes.size() == 0) {
            shapes.add(new Circle(id, color, radius));
        } else {
            Circle newCircle = new Circle(id, color ,radius);
            for (Shape shape : shapes) {
                if (shape.weight() < newCircle.weight()) {
                    shapes.add(shapes.indexOf(shape), newCircle);
                    break;
                } else if (shapes.indexOf(shape) == (shapes.size() - 1)) {
                    shapes.add(newCircle);
                    break;
                }
            }
        }
    }

    void add(String id, Color color, float width, float height) {
        if (shapes.size() == 0) {
            shapes.add(new Rectangle(id, color, width, height));
        } else {
            Rectangle newRectangle = new Rectangle(id, color, width, height);
            for (Shape shape : shapes) {
                if (shape.weight() < newRectangle.weight()) {
                    shapes.add(shapes.indexOf(shape), newRectangle);
                    break;
                } else if (shapes.indexOf(shape) == (shapes.size() - 1)) {
                    shapes.add(newRectangle);
                    break;
                }
            }
        }
    }

    void scale(String id, float scaleFactor) {
        Shape scaledShape = null;
        for (Shape shape : shapes) {
            if (shape.id.equals(id)) {
                shape.scale(scaleFactor);
                scaledShape = shape;
                shapes.remove(shape);
                break;
            }
        }
        for (Shape shape : shapes) {
            if (shape.weight() < scaledShape.weight()) {
                shapes.add(shapes.indexOf(shape), scaledShape);
                break;
            } else if (shapes.indexOf(shape) == (shapes.size() - 1)) {
                shapes.add(scaledShape);
                break;
            }
        }
    }

    @Override
    public String toString() {
        String theString = "";
        for (Shape shape : shapes) {
            try {
                shape = (Circle) shape;
                theString = theString.concat("C: ");
            } catch (ClassCastException e) {
                theString = theString.concat("R: ");
            }
            theString += String.format("%-5s%-10s%10.2f\n",
                    shape.id, shape.color.toString(), shape.weight());
        }
        return theString;
    }
}
